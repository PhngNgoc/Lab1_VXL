
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e34  08002e34  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002e34  08002e34  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e34  08002e34  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000060  08002e9c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002e9c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000961b  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7d  00000000  00000000  000296a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ebb  00000000  00000000  0002c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c395  00000000  00000000  000434c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823d4  00000000  00000000  0004f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000d1c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dfc 	.word	0x08002dfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002dfc 	.word	0x08002dfc

0800014c <isButton1Pressed>:

int button3_pressed = 0;
int button3_long_pressed = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000007c 	.word	0x2000007c

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000080 	.word	0x20000080

08000194 <getKey1Input>:
	button1_flag = 1;
	button2_flag = 1;
	button3_flag = 1;
}

void getKey1Input(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  KeyReg2_1 = KeyReg1_1;
 8000198:	4b24      	ldr	r3, [pc, #144]	; (800022c <getKey1Input+0x98>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a24      	ldr	r2, [pc, #144]	; (8000230 <getKey1Input+0x9c>)
 800019e:	6013      	str	r3, [r2, #0]
  KeyReg1_1 = KeyReg0_1;
 80001a0:	4b24      	ldr	r3, [pc, #144]	; (8000234 <getKey1Input+0xa0>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a21      	ldr	r2, [pc, #132]	; (800022c <getKey1Input+0x98>)
 80001a6:	6013      	str	r3, [r2, #0]
  // Add your key
  KeyReg0_1 = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 80001a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ac:	4822      	ldr	r0, [pc, #136]	; (8000238 <getKey1Input+0xa4>)
 80001ae:	f001 fde5 	bl	8001d7c <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	461a      	mov	r2, r3
 80001b6:	4b1f      	ldr	r3, [pc, #124]	; (8000234 <getKey1Input+0xa0>)
 80001b8:	601a      	str	r2, [r3, #0]

  if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)){
 80001ba:	4b1c      	ldr	r3, [pc, #112]	; (800022c <getKey1Input+0x98>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <getKey1Input+0xa0>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d12f      	bne.n	8000226 <getKey1Input+0x92>
 80001c6:	4b19      	ldr	r3, [pc, #100]	; (800022c <getKey1Input+0x98>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b19      	ldr	r3, [pc, #100]	; (8000230 <getKey1Input+0x9c>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d129      	bne.n	8000226 <getKey1Input+0x92>
    if (KeyReg2_1 != KeyReg3_1){
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <getKey1Input+0x9c>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	4b19      	ldr	r3, [pc, #100]	; (800023c <getKey1Input+0xa8>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d00f      	beq.n	80001fe <getKey1Input+0x6a>
      KeyReg3_1 = KeyReg2_1;
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <getKey1Input+0x9c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a16      	ldr	r2, [pc, #88]	; (800023c <getKey1Input+0xa8>)
 80001e4:	6013      	str	r3, [r2, #0]

      if (KeyReg3_1 == PRESSED_STATE){
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <getKey1Input+0xa8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d11b      	bne.n	8000226 <getKey1Input+0x92>
        TimeOutForKeyPress = 500;
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <getKey1Input+0xac>)
 80001f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001f4:	601a      	str	r2, [r3, #0]
        //subKeyProcess();
        button1_flag = 1;
 80001f6:	4b13      	ldr	r3, [pc, #76]	; (8000244 <getKey1Input+0xb0>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
        		button1_flag = 1;
        	}
        }
    }
  }
}
 80001fc:	e013      	b.n	8000226 <getKey1Input+0x92>
        TimeOutForKeyPress --;
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <getKey1Input+0xac>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3b01      	subs	r3, #1
 8000204:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <getKey1Input+0xac>)
 8000206:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <getKey1Input+0xac>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d10a      	bne.n	8000226 <getKey1Input+0x92>
        	TimeOutForKeyPress = 500;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <getKey1Input+0xac>)
 8000212:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000216:	601a      	str	r2, [r3, #0]
        	if (KeyReg3_1 == PRESSED_STATE){
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <getKey1Input+0xa8>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d102      	bne.n	8000226 <getKey1Input+0x92>
        		button1_flag = 1;
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <getKey1Input+0xb0>)
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000000c 	.word	0x2000000c
 8000230:	20000010 	.word	0x20000010
 8000234:	20000000 	.word	0x20000000
 8000238:	40010800 	.word	0x40010800
 800023c:	20000014 	.word	0x20000014
 8000240:	20000030 	.word	0x20000030
 8000244:	2000007c 	.word	0x2000007c

08000248 <getKey2Input>:

void getKey2Input(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	  KeyReg2_2 = KeyReg1_2;
 800024c:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <getKey2Input+0x98>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a24      	ldr	r2, [pc, #144]	; (80002e4 <getKey2Input+0x9c>)
 8000252:	6013      	str	r3, [r2, #0]
	  KeyReg1_2 = KeyReg0_2;
 8000254:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <getKey2Input+0xa0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <getKey2Input+0x98>)
 800025a:	6013      	str	r3, [r2, #0]
	  // Add your key
	  KeyReg0_2 = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 800025c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000260:	4822      	ldr	r0, [pc, #136]	; (80002ec <getKey2Input+0xa4>)
 8000262:	f001 fd8b 	bl	8001d7c <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <getKey2Input+0xa0>)
 800026c:	601a      	str	r2, [r3, #0]

	  if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)){
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <getKey2Input+0x98>)
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <getKey2Input+0xa0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d12f      	bne.n	80002da <getKey2Input+0x92>
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <getKey2Input+0x98>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <getKey2Input+0x9c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	429a      	cmp	r2, r3
 8000284:	d129      	bne.n	80002da <getKey2Input+0x92>
	    if (KeyReg2_2 != KeyReg3_2){
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <getKey2Input+0x9c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <getKey2Input+0xa8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	d00f      	beq.n	80002b2 <getKey2Input+0x6a>
	      KeyReg3_2 = KeyReg2_2;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <getKey2Input+0x9c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a16      	ldr	r2, [pc, #88]	; (80002f0 <getKey2Input+0xa8>)
 8000298:	6013      	str	r3, [r2, #0]

	      if (KeyReg3_2 == PRESSED_STATE){
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <getKey2Input+0xa8>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d11b      	bne.n	80002da <getKey2Input+0x92>
	        TimeOutForKeyPress = 500;
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <getKey2Input+0xac>)
 80002a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002a8:	601a      	str	r2, [r3, #0]
	        //subKeyProcess();
	        button2_flag = 1;
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <getKey2Input+0xb0>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
	        		button2_flag = 1;
	        	}
	        }
	    }
	  }
}
 80002b0:	e013      	b.n	80002da <getKey2Input+0x92>
	        TimeOutForKeyPress --;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <getKey2Input+0xac>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <getKey2Input+0xac>)
 80002ba:	6013      	str	r3, [r2, #0]
	        if (TimeOutForKeyPress == 0){
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <getKey2Input+0xac>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d10a      	bne.n	80002da <getKey2Input+0x92>
	        	TimeOutForKeyPress = 500;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <getKey2Input+0xac>)
 80002c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002ca:	601a      	str	r2, [r3, #0]
	        	if (KeyReg3_2 == PRESSED_STATE){
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <getKey2Input+0xa8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d102      	bne.n	80002da <getKey2Input+0x92>
	        		button2_flag = 1;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <getKey2Input+0xb0>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000018 	.word	0x20000018
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	20000004 	.word	0x20000004
 80002ec:	40010800 	.word	0x40010800
 80002f0:	20000020 	.word	0x20000020
 80002f4:	20000030 	.word	0x20000030
 80002f8:	20000080 	.word	0x20000080

080002fc <getKey3Input>:

void getKey3Input(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	  KeyReg2_3 = KeyReg1_3;
 8000300:	4b24      	ldr	r3, [pc, #144]	; (8000394 <getKey3Input+0x98>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a24      	ldr	r2, [pc, #144]	; (8000398 <getKey3Input+0x9c>)
 8000306:	6013      	str	r3, [r2, #0]
	  KeyReg1_3 = KeyReg0_3;
 8000308:	4b24      	ldr	r3, [pc, #144]	; (800039c <getKey3Input+0xa0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a21      	ldr	r2, [pc, #132]	; (8000394 <getKey3Input+0x98>)
 800030e:	6013      	str	r3, [r2, #0]
	  // Add your key
	  KeyReg0_3 = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <getKey3Input+0xa4>)
 8000316:	f001 fd31 	bl	8001d7c <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4b1f      	ldr	r3, [pc, #124]	; (800039c <getKey3Input+0xa0>)
 8000320:	601a      	str	r2, [r3, #0]

	  if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)){
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <getKey3Input+0x98>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <getKey3Input+0xa0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d12f      	bne.n	800038e <getKey3Input+0x92>
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <getKey3Input+0x98>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <getKey3Input+0x9c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d129      	bne.n	800038e <getKey3Input+0x92>
	    if (KeyReg2_3 != KeyReg3_3){
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <getKey3Input+0x9c>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <getKey3Input+0xa8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	429a      	cmp	r2, r3
 8000344:	d00f      	beq.n	8000366 <getKey3Input+0x6a>
	      KeyReg3_3 = KeyReg2_3;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <getKey3Input+0x9c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <getKey3Input+0xa8>)
 800034c:	6013      	str	r3, [r2, #0]

	      if (KeyReg3_3 == PRESSED_STATE){
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <getKey3Input+0xa8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d11b      	bne.n	800038e <getKey3Input+0x92>
	        TimeOutForKeyPress = 500;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <getKey3Input+0xac>)
 8000358:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800035c:	601a      	str	r2, [r3, #0]
	        //subKeyProcess();
	        button3_flag = 1;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <getKey3Input+0xb0>)
 8000360:	2201      	movs	r2, #1
 8000362:	601a      	str	r2, [r3, #0]
	        		button3_flag = 1;
	        	}
	        }
	    }
	  }
}
 8000364:	e013      	b.n	800038e <getKey3Input+0x92>
	        TimeOutForKeyPress --;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <getKey3Input+0xac>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <getKey3Input+0xac>)
 800036e:	6013      	str	r3, [r2, #0]
	        if (TimeOutForKeyPress == 0){
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <getKey3Input+0xac>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d10a      	bne.n	800038e <getKey3Input+0x92>
	        	TimeOutForKeyPress = 500;
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <getKey3Input+0xac>)
 800037a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800037e:	601a      	str	r2, [r3, #0]
	        	if (KeyReg3_3 == PRESSED_STATE){
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <getKey3Input+0xa8>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d102      	bne.n	800038e <getKey3Input+0x92>
	        		button3_flag = 1;
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <getKey3Input+0xb0>)
 800038a:	2201      	movs	r2, #1
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000024 	.word	0x20000024
 8000398:	20000028 	.word	0x20000028
 800039c:	20000008 	.word	0x20000008
 80003a0:	40010800 	.word	0x40010800
 80003a4:	2000002c 	.word	0x2000002c
 80003a8:	20000030 	.word	0x20000030
 80003ac:	20000084 	.word	0x20000084

080003b0 <change_displaynumber>:
 *      Author: tranm
 */

#include "display7seg.h"

uint8_t change_displaynumber(int num){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
    if (num == 0 ) return 0b01000000;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d101      	bne.n	80003c2 <change_displaynumber+0x12>
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	e02d      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 1 ) return 0b11111001;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d101      	bne.n	80003cc <change_displaynumber+0x1c>
 80003c8:	23f9      	movs	r3, #249	; 0xf9
 80003ca:	e028      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 2 ) return 0b00100100;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d101      	bne.n	80003d6 <change_displaynumber+0x26>
 80003d2:	2324      	movs	r3, #36	; 0x24
 80003d4:	e023      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 3 ) return 0b00110000;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d101      	bne.n	80003e0 <change_displaynumber+0x30>
 80003dc:	2330      	movs	r3, #48	; 0x30
 80003de:	e01e      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 4 ) return 0b00011001;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d101      	bne.n	80003ea <change_displaynumber+0x3a>
 80003e6:	2319      	movs	r3, #25
 80003e8:	e019      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 5 ) return 0b00010010;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b05      	cmp	r3, #5
 80003ee:	d101      	bne.n	80003f4 <change_displaynumber+0x44>
 80003f0:	2312      	movs	r3, #18
 80003f2:	e014      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 6 ) return 0b00000010;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b06      	cmp	r3, #6
 80003f8:	d101      	bne.n	80003fe <change_displaynumber+0x4e>
 80003fa:	2302      	movs	r3, #2
 80003fc:	e00f      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 7 ) return 0b01111000;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b07      	cmp	r3, #7
 8000402:	d101      	bne.n	8000408 <change_displaynumber+0x58>
 8000404:	2378      	movs	r3, #120	; 0x78
 8000406:	e00a      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 8 ) return 0b00000000;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b08      	cmp	r3, #8
 800040c:	d101      	bne.n	8000412 <change_displaynumber+0x62>
 800040e:	2300      	movs	r3, #0
 8000410:	e005      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 9 ) return 0b00010000;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b09      	cmp	r3, #9
 8000416:	d101      	bne.n	800041c <change_displaynumber+0x6c>
 8000418:	2310      	movs	r3, #16
 800041a:	e000      	b.n	800041e <change_displaynumber+0x6e>
    return 0b01111111;
 800041c:	237f      	movs	r3, #127	; 0x7f
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <displayled_3and4>:

void displayled_3and4( int num3, int num4) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
    uint8_t data3 = change_displaynumber(num3);
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ffbc 	bl	80003b0 <change_displaynumber>
 8000438:	4603      	mov	r3, r0
 800043a:	72fb      	strb	r3, [r7, #11]
    uint8_t data4 = change_displaynumber(num4);
 800043c:	6838      	ldr	r0, [r7, #0]
 800043e:	f7ff ffb7 	bl	80003b0 <change_displaynumber>
 8000442:	4603      	mov	r3, r0
 8000444:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 8; i++) {
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	e038      	b.n	80004be <displayled_3and4+0x96>
           if ( data3 & (0x80 >> i)) {
 800044c:	7afa      	ldrb	r2, [r7, #11]
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	fa41 f303 	asr.w	r3, r1, r3
 8000456:	4013      	ands	r3, r2
 8000458:	2b00      	cmp	r3, #0
 800045a:	d006      	beq.n	800046a <displayled_3and4+0x42>
               HAL_GPIO_WritePin(led7_3_GPIO_Port, led7_3_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000462:	4820      	ldr	r0, [pc, #128]	; (80004e4 <displayled_3and4+0xbc>)
 8000464:	f001 fca1 	bl	8001daa <HAL_GPIO_WritePin>
 8000468:	e005      	b.n	8000476 <displayled_3and4+0x4e>
           } else {
               HAL_GPIO_WritePin(led7_3_GPIO_Port, led7_3_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000470:	481c      	ldr	r0, [pc, #112]	; (80004e4 <displayled_3and4+0xbc>)
 8000472:	f001 fc9a 	bl	8001daa <HAL_GPIO_WritePin>
           }
           if ( data4 & (0x80 >> i)) {
 8000476:	7aba      	ldrb	r2, [r7, #10]
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	fa41 f303 	asr.w	r3, r1, r3
 8000480:	4013      	ands	r3, r2
 8000482:	2b00      	cmp	r3, #0
 8000484:	d006      	beq.n	8000494 <displayled_3and4+0x6c>
               HAL_GPIO_WritePin(led7_4_GPIO_Port, led7_4_Pin, GPIO_PIN_SET);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048c:	4815      	ldr	r0, [pc, #84]	; (80004e4 <displayled_3and4+0xbc>)
 800048e:	f001 fc8c 	bl	8001daa <HAL_GPIO_WritePin>
 8000492:	e005      	b.n	80004a0 <displayled_3and4+0x78>
           } else {
               HAL_GPIO_WritePin(led7_4_GPIO_Port, led7_4_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <displayled_3and4+0xbc>)
 800049c:	f001 fc85 	bl	8001daa <HAL_GPIO_WritePin>
           }
           // Tạo xung trên SH_CP để dịch bit vào thanh ghi
           HAL_GPIO_WritePin(SH_CP_GPIO_Port, SH_CP_Pin, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a6:	480f      	ldr	r0, [pc, #60]	; (80004e4 <displayled_3and4+0xbc>)
 80004a8:	f001 fc7f 	bl	8001daa <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(SH_CP_GPIO_Port, SH_CP_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <displayled_3and4+0xbc>)
 80004b4:	f001 fc79 	bl	8001daa <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	ddc3      	ble.n	800044c <displayled_3and4+0x24>
       }

       // Tạo xung trên ST_CP để chốt dữ liệu sau khi đã dịch xong 8 bit
       HAL_GPIO_WritePin( ST_CP_GPIO_Port, ST_CP_Pin, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	4806      	ldr	r0, [pc, #24]	; (80004e4 <displayled_3and4+0xbc>)
 80004cc:	f001 fc6d 	bl	8001daa <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(ST_CP_GPIO_Port, ST_CP_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <displayled_3and4+0xbc>)
 80004d8:	f001 fc67 	bl	8001daa <HAL_GPIO_WritePin>

}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010800 	.word	0x40010800

080004e8 <display7SEG1>:


void display7SEG1(int num){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b09      	cmp	r3, #9
 80004f4:	f200 8180 	bhi.w	80007f8 <display7SEG1+0x310>
 80004f8:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <display7SEG1+0x18>)
 80004fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fe:	bf00      	nop
 8000500:	08000529 	.word	0x08000529
 8000504:	08000571 	.word	0x08000571
 8000508:	080005b9 	.word	0x080005b9
 800050c:	08000601 	.word	0x08000601
 8000510:	08000649 	.word	0x08000649
 8000514:	08000691 	.word	0x08000691
 8000518:	080006d9 	.word	0x080006d9
 800051c:	08000721 	.word	0x08000721
 8000520:	08000769 	.word	0x08000769
 8000524:	080007b1 	.word	0x080007b1
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2101      	movs	r1, #1
 800052c:	48b4      	ldr	r0, [pc, #720]	; (8000800 <display7SEG1+0x318>)
 800052e:	f001 fc3c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	48b2      	ldr	r0, [pc, #712]	; (8000800 <display7SEG1+0x318>)
 8000538:	f001 fc37 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	48af      	ldr	r0, [pc, #700]	; (8000800 <display7SEG1+0x318>)
 8000542:	f001 fc32 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2108      	movs	r1, #8
 800054a:	48ad      	ldr	r0, [pc, #692]	; (8000800 <display7SEG1+0x318>)
 800054c:	f001 fc2d 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2110      	movs	r1, #16
 8000554:	48aa      	ldr	r0, [pc, #680]	; (8000800 <display7SEG1+0x318>)
 8000556:	f001 fc28 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	48a8      	ldr	r0, [pc, #672]	; (8000800 <display7SEG1+0x318>)
 8000560:	f001 fc23 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a5      	ldr	r0, [pc, #660]	; (8000800 <display7SEG1+0x318>)
 800056a:	f001 fc1e 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 800056e:	e143      	b.n	80007f8 <display7SEG1+0x310>
		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2101      	movs	r1, #1
 8000574:	48a2      	ldr	r0, [pc, #648]	; (8000800 <display7SEG1+0x318>)
 8000576:	f001 fc18 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2102      	movs	r1, #2
 800057e:	48a0      	ldr	r0, [pc, #640]	; (8000800 <display7SEG1+0x318>)
 8000580:	f001 fc13 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	489d      	ldr	r0, [pc, #628]	; (8000800 <display7SEG1+0x318>)
 800058a:	f001 fc0e 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2108      	movs	r1, #8
 8000592:	489b      	ldr	r0, [pc, #620]	; (8000800 <display7SEG1+0x318>)
 8000594:	f001 fc09 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	4898      	ldr	r0, [pc, #608]	; (8000800 <display7SEG1+0x318>)
 800059e:	f001 fc04 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4896      	ldr	r0, [pc, #600]	; (8000800 <display7SEG1+0x318>)
 80005a8:	f001 fbff 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4893      	ldr	r0, [pc, #588]	; (8000800 <display7SEG1+0x318>)
 80005b2:	f001 fbfa 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 80005b6:	e11f      	b.n	80007f8 <display7SEG1+0x310>
		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	4890      	ldr	r0, [pc, #576]	; (8000800 <display7SEG1+0x318>)
 80005be:	f001 fbf4 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2102      	movs	r1, #2
 80005c6:	488e      	ldr	r0, [pc, #568]	; (8000800 <display7SEG1+0x318>)
 80005c8:	f001 fbef 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2104      	movs	r1, #4
 80005d0:	488b      	ldr	r0, [pc, #556]	; (8000800 <display7SEG1+0x318>)
 80005d2:	f001 fbea 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	4889      	ldr	r0, [pc, #548]	; (8000800 <display7SEG1+0x318>)
 80005dc:	f001 fbe5 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	4886      	ldr	r0, [pc, #536]	; (8000800 <display7SEG1+0x318>)
 80005e6:	f001 fbe0 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	4884      	ldr	r0, [pc, #528]	; (8000800 <display7SEG1+0x318>)
 80005f0:	f001 fbdb 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	4881      	ldr	r0, [pc, #516]	; (8000800 <display7SEG1+0x318>)
 80005fa:	f001 fbd6 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 80005fe:	e0fb      	b.n	80007f8 <display7SEG1+0x310>
		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	487e      	ldr	r0, [pc, #504]	; (8000800 <display7SEG1+0x318>)
 8000606:	f001 fbd0 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	487c      	ldr	r0, [pc, #496]	; (8000800 <display7SEG1+0x318>)
 8000610:	f001 fbcb 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4879      	ldr	r0, [pc, #484]	; (8000800 <display7SEG1+0x318>)
 800061a:	f001 fbc6 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4877      	ldr	r0, [pc, #476]	; (8000800 <display7SEG1+0x318>)
 8000624:	f001 fbc1 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4874      	ldr	r0, [pc, #464]	; (8000800 <display7SEG1+0x318>)
 800062e:	f001 fbbc 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	4872      	ldr	r0, [pc, #456]	; (8000800 <display7SEG1+0x318>)
 8000638:	f001 fbb7 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	486f      	ldr	r0, [pc, #444]	; (8000800 <display7SEG1+0x318>)
 8000642:	f001 fbb2 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000646:	e0d7      	b.n	80007f8 <display7SEG1+0x310>
		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	486c      	ldr	r0, [pc, #432]	; (8000800 <display7SEG1+0x318>)
 800064e:	f001 fbac 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2102      	movs	r1, #2
 8000656:	486a      	ldr	r0, [pc, #424]	; (8000800 <display7SEG1+0x318>)
 8000658:	f001 fba7 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4867      	ldr	r0, [pc, #412]	; (8000800 <display7SEG1+0x318>)
 8000662:	f001 fba2 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2108      	movs	r1, #8
 800066a:	4865      	ldr	r0, [pc, #404]	; (8000800 <display7SEG1+0x318>)
 800066c:	f001 fb9d 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4862      	ldr	r0, [pc, #392]	; (8000800 <display7SEG1+0x318>)
 8000676:	f001 fb98 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4860      	ldr	r0, [pc, #384]	; (8000800 <display7SEG1+0x318>)
 8000680:	f001 fb93 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	485d      	ldr	r0, [pc, #372]	; (8000800 <display7SEG1+0x318>)
 800068a:	f001 fb8e 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 800068e:	e0b3      	b.n	80007f8 <display7SEG1+0x310>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	485a      	ldr	r0, [pc, #360]	; (8000800 <display7SEG1+0x318>)
 8000696:	f001 fb88 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4858      	ldr	r0, [pc, #352]	; (8000800 <display7SEG1+0x318>)
 80006a0:	f001 fb83 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	4855      	ldr	r0, [pc, #340]	; (8000800 <display7SEG1+0x318>)
 80006aa:	f001 fb7e 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4853      	ldr	r0, [pc, #332]	; (8000800 <display7SEG1+0x318>)
 80006b4:	f001 fb79 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4850      	ldr	r0, [pc, #320]	; (8000800 <display7SEG1+0x318>)
 80006be:	f001 fb74 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	484e      	ldr	r0, [pc, #312]	; (8000800 <display7SEG1+0x318>)
 80006c8:	f001 fb6f 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <display7SEG1+0x318>)
 80006d2:	f001 fb6a 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 80006d6:	e08f      	b.n	80007f8 <display7SEG1+0x310>
		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4848      	ldr	r0, [pc, #288]	; (8000800 <display7SEG1+0x318>)
 80006de:	f001 fb64 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2102      	movs	r1, #2
 80006e6:	4846      	ldr	r0, [pc, #280]	; (8000800 <display7SEG1+0x318>)
 80006e8:	f001 fb5f 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	4843      	ldr	r0, [pc, #268]	; (8000800 <display7SEG1+0x318>)
 80006f2:	f001 fb5a 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2108      	movs	r1, #8
 80006fa:	4841      	ldr	r0, [pc, #260]	; (8000800 <display7SEG1+0x318>)
 80006fc:	f001 fb55 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2110      	movs	r1, #16
 8000704:	483e      	ldr	r0, [pc, #248]	; (8000800 <display7SEG1+0x318>)
 8000706:	f001 fb50 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	483c      	ldr	r0, [pc, #240]	; (8000800 <display7SEG1+0x318>)
 8000710:	f001 fb4b 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <display7SEG1+0x318>)
 800071a:	f001 fb46 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 800071e:	e06b      	b.n	80007f8 <display7SEG1+0x310>
		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	4836      	ldr	r0, [pc, #216]	; (8000800 <display7SEG1+0x318>)
 8000726:	f001 fb40 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	4834      	ldr	r0, [pc, #208]	; (8000800 <display7SEG1+0x318>)
 8000730:	f001 fb3b 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	4831      	ldr	r0, [pc, #196]	; (8000800 <display7SEG1+0x318>)
 800073a:	f001 fb36 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2108      	movs	r1, #8
 8000742:	482f      	ldr	r0, [pc, #188]	; (8000800 <display7SEG1+0x318>)
 8000744:	f001 fb31 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <display7SEG1+0x318>)
 800074e:	f001 fb2c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2120      	movs	r1, #32
 8000756:	482a      	ldr	r0, [pc, #168]	; (8000800 <display7SEG1+0x318>)
 8000758:	f001 fb27 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	4827      	ldr	r0, [pc, #156]	; (8000800 <display7SEG1+0x318>)
 8000762:	f001 fb22 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000766:	e047      	b.n	80007f8 <display7SEG1+0x310>
		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4824      	ldr	r0, [pc, #144]	; (8000800 <display7SEG1+0x318>)
 800076e:	f001 fb1c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	4822      	ldr	r0, [pc, #136]	; (8000800 <display7SEG1+0x318>)
 8000778:	f001 fb17 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2104      	movs	r1, #4
 8000780:	481f      	ldr	r0, [pc, #124]	; (8000800 <display7SEG1+0x318>)
 8000782:	f001 fb12 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	481d      	ldr	r0, [pc, #116]	; (8000800 <display7SEG1+0x318>)
 800078c:	f001 fb0d 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2110      	movs	r1, #16
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <display7SEG1+0x318>)
 8000796:	f001 fb08 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <display7SEG1+0x318>)
 80007a0:	f001 fb03 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <display7SEG1+0x318>)
 80007aa:	f001 fafe 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 80007ae:	e023      	b.n	80007f8 <display7SEG1+0x310>
		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <display7SEG1+0x318>)
 80007b6:	f001 faf8 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <display7SEG1+0x318>)
 80007c0:	f001 faf3 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2104      	movs	r1, #4
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <display7SEG1+0x318>)
 80007ca:	f001 faee 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <display7SEG1+0x318>)
 80007d4:	f001 fae9 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <display7SEG1+0x318>)
 80007de:	f001 fae4 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <display7SEG1+0x318>)
 80007e8:	f001 fadf 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <display7SEG1+0x318>)
 80007f2:	f001 fada 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 80007f6:	bf00      	nop
	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010c00 	.word	0x40010c00

08000804 <display7SEG2>:
void display7SEG2(int num){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b09      	cmp	r3, #9
 8000810:	f200 81bc 	bhi.w	8000b8c <display7SEG2+0x388>
 8000814:	a201      	add	r2, pc, #4	; (adr r2, 800081c <display7SEG2+0x18>)
 8000816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081a:	bf00      	nop
 800081c:	08000845 	.word	0x08000845
 8000820:	08000899 	.word	0x08000899
 8000824:	080008ed 	.word	0x080008ed
 8000828:	08000941 	.word	0x08000941
 800082c:	08000995 	.word	0x08000995
 8000830:	080009e9 	.word	0x080009e9
 8000834:	08000a3d 	.word	0x08000a3d
 8000838:	08000a91 	.word	0x08000a91
 800083c:	08000ae5 	.word	0x08000ae5
 8000840:	08000b39 	.word	0x08000b39
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	48d2      	ldr	r0, [pc, #840]	; (8000b94 <display7SEG2+0x390>)
 800084a:	f001 faae 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	48cf      	ldr	r0, [pc, #828]	; (8000b94 <display7SEG2+0x390>)
 8000856:	f001 faa8 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000860:	48cc      	ldr	r0, [pc, #816]	; (8000b94 <display7SEG2+0x390>)
 8000862:	f001 faa2 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	48c9      	ldr	r0, [pc, #804]	; (8000b94 <display7SEG2+0x390>)
 800086e:	f001 fa9c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000878:	48c6      	ldr	r0, [pc, #792]	; (8000b94 <display7SEG2+0x390>)
 800087a:	f001 fa96 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000884:	48c3      	ldr	r0, [pc, #780]	; (8000b94 <display7SEG2+0x390>)
 8000886:	f001 fa90 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	48c0      	ldr	r0, [pc, #768]	; (8000b94 <display7SEG2+0x390>)
 8000892:	f001 fa8a 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000896:	e179      	b.n	8000b8c <display7SEG2+0x388>
		case 1:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	48bd      	ldr	r0, [pc, #756]	; (8000b94 <display7SEG2+0x390>)
 800089e:	f001 fa84 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	48ba      	ldr	r0, [pc, #744]	; (8000b94 <display7SEG2+0x390>)
 80008aa:	f001 fa7e 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b4:	48b7      	ldr	r0, [pc, #732]	; (8000b94 <display7SEG2+0x390>)
 80008b6:	f001 fa78 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c0:	48b4      	ldr	r0, [pc, #720]	; (8000b94 <display7SEG2+0x390>)
 80008c2:	f001 fa72 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008cc:	48b1      	ldr	r0, [pc, #708]	; (8000b94 <display7SEG2+0x390>)
 80008ce:	f001 fa6c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d8:	48ae      	ldr	r0, [pc, #696]	; (8000b94 <display7SEG2+0x390>)
 80008da:	f001 fa66 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	48ab      	ldr	r0, [pc, #684]	; (8000b94 <display7SEG2+0x390>)
 80008e6:	f001 fa60 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 80008ea:	e14f      	b.n	8000b8c <display7SEG2+0x388>
		case 2:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	48a8      	ldr	r0, [pc, #672]	; (8000b94 <display7SEG2+0x390>)
 80008f2:	f001 fa5a 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	48a5      	ldr	r0, [pc, #660]	; (8000b94 <display7SEG2+0x390>)
 80008fe:	f001 fa54 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	48a2      	ldr	r0, [pc, #648]	; (8000b94 <display7SEG2+0x390>)
 800090a:	f001 fa4e 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000914:	489f      	ldr	r0, [pc, #636]	; (8000b94 <display7SEG2+0x390>)
 8000916:	f001 fa48 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	489c      	ldr	r0, [pc, #624]	; (8000b94 <display7SEG2+0x390>)
 8000922:	f001 fa42 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4899      	ldr	r0, [pc, #612]	; (8000b94 <display7SEG2+0x390>)
 800092e:	f001 fa3c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000938:	4896      	ldr	r0, [pc, #600]	; (8000b94 <display7SEG2+0x390>)
 800093a:	f001 fa36 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 800093e:	e125      	b.n	8000b8c <display7SEG2+0x388>
		case 3:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	4893      	ldr	r0, [pc, #588]	; (8000b94 <display7SEG2+0x390>)
 8000946:	f001 fa30 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	4890      	ldr	r0, [pc, #576]	; (8000b94 <display7SEG2+0x390>)
 8000952:	f001 fa2a 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095c:	488d      	ldr	r0, [pc, #564]	; (8000b94 <display7SEG2+0x390>)
 800095e:	f001 fa24 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	488a      	ldr	r0, [pc, #552]	; (8000b94 <display7SEG2+0x390>)
 800096a:	f001 fa1e 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	4887      	ldr	r0, [pc, #540]	; (8000b94 <display7SEG2+0x390>)
 8000976:	f001 fa18 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000980:	4884      	ldr	r0, [pc, #528]	; (8000b94 <display7SEG2+0x390>)
 8000982:	f001 fa12 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	4881      	ldr	r0, [pc, #516]	; (8000b94 <display7SEG2+0x390>)
 800098e:	f001 fa0c 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000992:	e0fb      	b.n	8000b8c <display7SEG2+0x388>
		case 4:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	487e      	ldr	r0, [pc, #504]	; (8000b94 <display7SEG2+0x390>)
 800099a:	f001 fa06 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a4:	487b      	ldr	r0, [pc, #492]	; (8000b94 <display7SEG2+0x390>)
 80009a6:	f001 fa00 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	4878      	ldr	r0, [pc, #480]	; (8000b94 <display7SEG2+0x390>)
 80009b2:	f001 f9fa 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009bc:	4875      	ldr	r0, [pc, #468]	; (8000b94 <display7SEG2+0x390>)
 80009be:	f001 f9f4 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c8:	4872      	ldr	r0, [pc, #456]	; (8000b94 <display7SEG2+0x390>)
 80009ca:	f001 f9ee 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d4:	486f      	ldr	r0, [pc, #444]	; (8000b94 <display7SEG2+0x390>)
 80009d6:	f001 f9e8 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e0:	486c      	ldr	r0, [pc, #432]	; (8000b94 <display7SEG2+0x390>)
 80009e2:	f001 f9e2 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 80009e6:	e0d1      	b.n	8000b8c <display7SEG2+0x388>
		case 5:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	4869      	ldr	r0, [pc, #420]	; (8000b94 <display7SEG2+0x390>)
 80009ee:	f001 f9dc 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f8:	4866      	ldr	r0, [pc, #408]	; (8000b94 <display7SEG2+0x390>)
 80009fa:	f001 f9d6 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	4863      	ldr	r0, [pc, #396]	; (8000b94 <display7SEG2+0x390>)
 8000a06:	f001 f9d0 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	4860      	ldr	r0, [pc, #384]	; (8000b94 <display7SEG2+0x390>)
 8000a12:	f001 f9ca 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1c:	485d      	ldr	r0, [pc, #372]	; (8000b94 <display7SEG2+0x390>)
 8000a1e:	f001 f9c4 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a28:	485a      	ldr	r0, [pc, #360]	; (8000b94 <display7SEG2+0x390>)
 8000a2a:	f001 f9be 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a34:	4857      	ldr	r0, [pc, #348]	; (8000b94 <display7SEG2+0x390>)
 8000a36:	f001 f9b8 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000a3a:	e0a7      	b.n	8000b8c <display7SEG2+0x388>
		case 6:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2180      	movs	r1, #128	; 0x80
 8000a40:	4854      	ldr	r0, [pc, #336]	; (8000b94 <display7SEG2+0x390>)
 8000a42:	f001 f9b2 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4c:	4851      	ldr	r0, [pc, #324]	; (8000b94 <display7SEG2+0x390>)
 8000a4e:	f001 f9ac 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	484e      	ldr	r0, [pc, #312]	; (8000b94 <display7SEG2+0x390>)
 8000a5a:	f001 f9a6 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a64:	484b      	ldr	r0, [pc, #300]	; (8000b94 <display7SEG2+0x390>)
 8000a66:	f001 f9a0 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a70:	4848      	ldr	r0, [pc, #288]	; (8000b94 <display7SEG2+0x390>)
 8000a72:	f001 f99a 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4845      	ldr	r0, [pc, #276]	; (8000b94 <display7SEG2+0x390>)
 8000a7e:	f001 f994 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a88:	4842      	ldr	r0, [pc, #264]	; (8000b94 <display7SEG2+0x390>)
 8000a8a:	f001 f98e 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000a8e:	e07d      	b.n	8000b8c <display7SEG2+0x388>
		case 7:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	483f      	ldr	r0, [pc, #252]	; (8000b94 <display7SEG2+0x390>)
 8000a96:	f001 f988 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	483c      	ldr	r0, [pc, #240]	; (8000b94 <display7SEG2+0x390>)
 8000aa2:	f001 f982 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	4839      	ldr	r0, [pc, #228]	; (8000b94 <display7SEG2+0x390>)
 8000aae:	f001 f97c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <display7SEG2+0x390>)
 8000aba:	f001 f976 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac4:	4833      	ldr	r0, [pc, #204]	; (8000b94 <display7SEG2+0x390>)
 8000ac6:	f001 f970 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad0:	4830      	ldr	r0, [pc, #192]	; (8000b94 <display7SEG2+0x390>)
 8000ad2:	f001 f96a 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	482d      	ldr	r0, [pc, #180]	; (8000b94 <display7SEG2+0x390>)
 8000ade:	f001 f964 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000ae2:	e053      	b.n	8000b8c <display7SEG2+0x388>
		case 8:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	482a      	ldr	r0, [pc, #168]	; (8000b94 <display7SEG2+0x390>)
 8000aea:	f001 f95e 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af4:	4827      	ldr	r0, [pc, #156]	; (8000b94 <display7SEG2+0x390>)
 8000af6:	f001 f958 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	4824      	ldr	r0, [pc, #144]	; (8000b94 <display7SEG2+0x390>)
 8000b02:	f001 f952 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	4821      	ldr	r0, [pc, #132]	; (8000b94 <display7SEG2+0x390>)
 8000b0e:	f001 f94c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	481e      	ldr	r0, [pc, #120]	; (8000b94 <display7SEG2+0x390>)
 8000b1a:	f001 f946 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	481b      	ldr	r0, [pc, #108]	; (8000b94 <display7SEG2+0x390>)
 8000b26:	f001 f940 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	4818      	ldr	r0, [pc, #96]	; (8000b94 <display7SEG2+0x390>)
 8000b32:	f001 f93a 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000b36:	e029      	b.n	8000b8c <display7SEG2+0x388>
		case 9:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4815      	ldr	r0, [pc, #84]	; (8000b94 <display7SEG2+0x390>)
 8000b3e:	f001 f934 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <display7SEG2+0x390>)
 8000b4a:	f001 f92e 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <display7SEG2+0x390>)
 8000b56:	f001 f928 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <display7SEG2+0x390>)
 8000b62:	f001 f922 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <display7SEG2+0x390>)
 8000b6e:	f001 f91c 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <display7SEG2+0x390>)
 8000b7a:	f001 f916 	bl	8001daa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <display7SEG2+0x390>)
 8000b86:	f001 f910 	bl	8001daa <HAL_GPIO_WritePin>
			break;
 8000b8a:	bf00      	nop
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <fsm_automatic>:
#include "fsm_automatic.h"

int count1;
int count2;

void fsm_automatic(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	switch (status1) {
 8000b9c:	4b9f      	ldr	r3, [pc, #636]	; (8000e1c <fsm_automatic+0x284>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	f200 8094 	bhi.w	8000cd0 <fsm_automatic+0x138>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <fsm_automatic+0x18>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000bff 	.word	0x08000bff
 8000bb8:	08000c45 	.word	0x08000c45
 8000bbc:	08000c8b 	.word	0x08000c8b
			case INIT:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4896      	ldr	r0, [pc, #600]	; (8000e20 <fsm_automatic+0x288>)
 8000bc6:	f001 f8f0 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2108      	movs	r1, #8
 8000bce:	4894      	ldr	r0, [pc, #592]	; (8000e20 <fsm_automatic+0x288>)
 8000bd0:	f001 f8eb 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4891      	ldr	r0, [pc, #580]	; (8000e20 <fsm_automatic+0x288>)
 8000bda:	f001 f8e6 	bl	8001daa <HAL_GPIO_WritePin>
				status1 = AUTO_GREEN;
 8000bde:	4b8f      	ldr	r3, [pc, #572]	; (8000e1c <fsm_automatic+0x284>)
 8000be0:	2203      	movs	r2, #3
 8000be2:	601a      	str	r2, [r3, #0]
				setTimer1(time_green*100);
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <fsm_automatic+0x28c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2264      	movs	r2, #100	; 0x64
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fc58 	bl	80014a4 <setTimer1>
				count1 = time_green;
 8000bf4:	4b8b      	ldr	r3, [pc, #556]	; (8000e24 <fsm_automatic+0x28c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a8b      	ldr	r2, [pc, #556]	; (8000e28 <fsm_automatic+0x290>)
 8000bfa:	6013      	str	r3, [r2, #0]
				break;
 8000bfc:	e06f      	b.n	8000cde <fsm_automatic+0x146>
			case AUTO_RED:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4887      	ldr	r0, [pc, #540]	; (8000e20 <fsm_automatic+0x288>)
 8000c04:	f001 f8d1 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	4884      	ldr	r0, [pc, #528]	; (8000e20 <fsm_automatic+0x288>)
 8000c0e:	f001 f8cc 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2104      	movs	r1, #4
 8000c16:	4882      	ldr	r0, [pc, #520]	; (8000e20 <fsm_automatic+0x288>)
 8000c18:	f001 f8c7 	bl	8001daa <HAL_GPIO_WritePin>
				if (timer1_flag == 1 ){
 8000c1c:	4b83      	ldr	r3, [pc, #524]	; (8000e2c <fsm_automatic+0x294>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d157      	bne.n	8000cd4 <fsm_automatic+0x13c>
					status1 = AUTO_GREEN;
 8000c24:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <fsm_automatic+0x284>)
 8000c26:	2203      	movs	r2, #3
 8000c28:	601a      	str	r2, [r3, #0]
					setTimer1(time_green*100);
 8000c2a:	4b7e      	ldr	r3, [pc, #504]	; (8000e24 <fsm_automatic+0x28c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2264      	movs	r2, #100	; 0x64
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fc35 	bl	80014a4 <setTimer1>
					count1 = time_green;
 8000c3a:	4b7a      	ldr	r3, [pc, #488]	; (8000e24 <fsm_automatic+0x28c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a7a      	ldr	r2, [pc, #488]	; (8000e28 <fsm_automatic+0x290>)
 8000c40:	6013      	str	r3, [r2, #0]
				}
				break;
 8000c42:	e047      	b.n	8000cd4 <fsm_automatic+0x13c>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2102      	movs	r1, #2
 8000c48:	4875      	ldr	r0, [pc, #468]	; (8000e20 <fsm_automatic+0x288>)
 8000c4a:	f001 f8ae 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2108      	movs	r1, #8
 8000c52:	4873      	ldr	r0, [pc, #460]	; (8000e20 <fsm_automatic+0x288>)
 8000c54:	f001 f8a9 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	4870      	ldr	r0, [pc, #448]	; (8000e20 <fsm_automatic+0x288>)
 8000c5e:	f001 f8a4 	bl	8001daa <HAL_GPIO_WritePin>
				if (timer1_flag == 1){
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <fsm_automatic+0x294>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d136      	bne.n	8000cd8 <fsm_automatic+0x140>
					status1 = AUTO_YELLOW;
 8000c6a:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <fsm_automatic+0x284>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
					setTimer1(time_yellow*100);
 8000c70:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <fsm_automatic+0x298>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fc12 	bl	80014a4 <setTimer1>
					count1 = time_yellow;
 8000c80:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <fsm_automatic+0x298>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a68      	ldr	r2, [pc, #416]	; (8000e28 <fsm_automatic+0x290>)
 8000c86:	6013      	str	r3, [r2, #0]
				}
				break;
 8000c88:	e026      	b.n	8000cd8 <fsm_automatic+0x140>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4864      	ldr	r0, [pc, #400]	; (8000e20 <fsm_automatic+0x288>)
 8000c90:	f001 f88b 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2108      	movs	r1, #8
 8000c98:	4861      	ldr	r0, [pc, #388]	; (8000e20 <fsm_automatic+0x288>)
 8000c9a:	f001 f886 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	485f      	ldr	r0, [pc, #380]	; (8000e20 <fsm_automatic+0x288>)
 8000ca4:	f001 f881 	bl	8001daa <HAL_GPIO_WritePin>
				if (timer1_flag == 1){
 8000ca8:	4b60      	ldr	r3, [pc, #384]	; (8000e2c <fsm_automatic+0x294>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d115      	bne.n	8000cdc <fsm_automatic+0x144>
					status1 = AUTO_RED;
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <fsm_automatic+0x284>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	601a      	str	r2, [r3, #0]
					setTimer1(time_red*100);
 8000cb6:	4b5f      	ldr	r3, [pc, #380]	; (8000e34 <fsm_automatic+0x29c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2264      	movs	r2, #100	; 0x64
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fbef 	bl	80014a4 <setTimer1>
					count1 = time_red;
 8000cc6:	4b5b      	ldr	r3, [pc, #364]	; (8000e34 <fsm_automatic+0x29c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <fsm_automatic+0x290>)
 8000ccc:	6013      	str	r3, [r2, #0]
				}
				break;
 8000cce:	e005      	b.n	8000cdc <fsm_automatic+0x144>
			default:
				break;
 8000cd0:	bf00      	nop
 8000cd2:	e004      	b.n	8000cde <fsm_automatic+0x146>
				break;
 8000cd4:	bf00      	nop
 8000cd6:	e002      	b.n	8000cde <fsm_automatic+0x146>
				break;
 8000cd8:	bf00      	nop
 8000cda:	e000      	b.n	8000cde <fsm_automatic+0x146>
				break;
 8000cdc:	bf00      	nop
		}
	switch (status2) {
 8000cde:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <fsm_automatic+0x2a0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	f200 8093 	bhi.w	8000e10 <fsm_automatic+0x278>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <fsm_automatic+0x158>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d01 	.word	0x08000d01
 8000cf4:	08000d3f 	.word	0x08000d3f
 8000cf8:	08000d85 	.word	0x08000d85
 8000cfc:	08000dcb 	.word	0x08000dcb
			case INIT:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2110      	movs	r1, #16
 8000d04:	4846      	ldr	r0, [pc, #280]	; (8000e20 <fsm_automatic+0x288>)
 8000d06:	f001 f850 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2140      	movs	r1, #64	; 0x40
 8000d0e:	4844      	ldr	r0, [pc, #272]	; (8000e20 <fsm_automatic+0x288>)
 8000d10:	f001 f84b 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2120      	movs	r1, #32
 8000d18:	4841      	ldr	r0, [pc, #260]	; (8000e20 <fsm_automatic+0x288>)
 8000d1a:	f001 f846 	bl	8001daa <HAL_GPIO_WritePin>
				status2 = AUTO_RED;
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <fsm_automatic+0x2a0>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	601a      	str	r2, [r3, #0]
				count2 = time_red;
 8000d24:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <fsm_automatic+0x29c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a44      	ldr	r2, [pc, #272]	; (8000e3c <fsm_automatic+0x2a4>)
 8000d2a:	6013      	str	r3, [r2, #0]
				setTimer2(time_red*100);
 8000d2c:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <fsm_automatic+0x29c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2264      	movs	r2, #100	; 0x64
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fbc8 	bl	80014cc <setTimer2>
				break;
 8000d3c:	e083      	b.n	8000e46 <fsm_automatic+0x2ae>
			case AUTO_RED:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	4837      	ldr	r0, [pc, #220]	; (8000e20 <fsm_automatic+0x288>)
 8000d44:	f001 f831 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	4834      	ldr	r0, [pc, #208]	; (8000e20 <fsm_automatic+0x288>)
 8000d4e:	f001 f82c 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2120      	movs	r1, #32
 8000d56:	4832      	ldr	r0, [pc, #200]	; (8000e20 <fsm_automatic+0x288>)
 8000d58:	f001 f827 	bl	8001daa <HAL_GPIO_WritePin>
				if (timer2_flag == 1){
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <fsm_automatic+0x2a8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d157      	bne.n	8000e14 <fsm_automatic+0x27c>
					status2 = AUTO_GREEN;
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <fsm_automatic+0x2a0>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	601a      	str	r2, [r3, #0]
					setTimer2(time_green*100);
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <fsm_automatic+0x28c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2264      	movs	r2, #100	; 0x64
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fba9 	bl	80014cc <setTimer2>
					count2 = time_green;
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <fsm_automatic+0x28c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <fsm_automatic+0x2a4>)
 8000d80:	6013      	str	r3, [r2, #0]
				}
				break;
 8000d82:	e047      	b.n	8000e14 <fsm_automatic+0x27c>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2110      	movs	r1, #16
 8000d88:	4825      	ldr	r0, [pc, #148]	; (8000e20 <fsm_automatic+0x288>)
 8000d8a:	f001 f80e 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	4823      	ldr	r0, [pc, #140]	; (8000e20 <fsm_automatic+0x288>)
 8000d94:	f001 f809 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	4820      	ldr	r0, [pc, #128]	; (8000e20 <fsm_automatic+0x288>)
 8000d9e:	f001 f804 	bl	8001daa <HAL_GPIO_WritePin>
				if (timer2_flag == 1){
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <fsm_automatic+0x2a8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d136      	bne.n	8000e18 <fsm_automatic+0x280>
					status2 = AUTO_YELLOW;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <fsm_automatic+0x2a0>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	601a      	str	r2, [r3, #0]
					setTimer2(time_yellow*100);
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <fsm_automatic+0x298>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2264      	movs	r2, #100	; 0x64
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fb86 	bl	80014cc <setTimer2>
					count2 = time_yellow;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <fsm_automatic+0x298>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <fsm_automatic+0x2a4>)
 8000dc6:	6013      	str	r3, [r2, #0]
				}
				break;
 8000dc8:	e026      	b.n	8000e18 <fsm_automatic+0x280>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4814      	ldr	r0, [pc, #80]	; (8000e20 <fsm_automatic+0x288>)
 8000dd0:	f000 ffeb 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <fsm_automatic+0x288>)
 8000dda:	f000 ffe6 	bl	8001daa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	480f      	ldr	r0, [pc, #60]	; (8000e20 <fsm_automatic+0x288>)
 8000de4:	f000 ffe1 	bl	8001daa <HAL_GPIO_WritePin>
				if (timer2_flag == 1){
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <fsm_automatic+0x2a8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d129      	bne.n	8000e44 <fsm_automatic+0x2ac>
					status2 = AUTO_RED;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <fsm_automatic+0x2a0>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	601a      	str	r2, [r3, #0]
					setTimer2(time_red*100);
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <fsm_automatic+0x29c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2264      	movs	r2, #100	; 0x64
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fb63 	bl	80014cc <setTimer2>
					count2 = time_red;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <fsm_automatic+0x29c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <fsm_automatic+0x2a4>)
 8000e0c:	6013      	str	r3, [r2, #0]
				}
				break;
 8000e0e:	e019      	b.n	8000e44 <fsm_automatic+0x2ac>
			default:
				break;
 8000e10:	bf00      	nop
 8000e12:	e018      	b.n	8000e46 <fsm_automatic+0x2ae>
				break;
 8000e14:	bf00      	nop
 8000e16:	e016      	b.n	8000e46 <fsm_automatic+0x2ae>
				break;
 8000e18:	bf00      	nop
 8000e1a:	e014      	b.n	8000e46 <fsm_automatic+0x2ae>
 8000e1c:	20000088 	.word	0x20000088
 8000e20:	40010800 	.word	0x40010800
 8000e24:	2000003c 	.word	0x2000003c
 8000e28:	200000ac 	.word	0x200000ac
 8000e2c:	20000040 	.word	0x20000040
 8000e30:	20000038 	.word	0x20000038
 8000e34:	20000034 	.word	0x20000034
 8000e38:	2000008c 	.word	0x2000008c
 8000e3c:	200000a8 	.word	0x200000a8
 8000e40:	20000044 	.word	0x20000044
				break;
 8000e44:	bf00      	nop
		}
	    if (count1 == 0 ) return;
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <fsm_automatic+0x398>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d06c      	beq.n	8000f28 <fsm_automatic+0x390>
	    if (count2 == 0 ) return;
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <fsm_automatic+0x39c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d06a      	beq.n	8000f2c <fsm_automatic+0x394>

	    if ( timer3_flag == 1) {
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <fsm_automatic+0x3a0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d12c      	bne.n	8000eb8 <fsm_automatic+0x320>
			setTimer3(100);
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f000 fb48 	bl	80014f4 <setTimer3>
			if( count1 < 10 ) displayled_3and4(0, count1);
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <fsm_automatic+0x398>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b09      	cmp	r3, #9
 8000e6a:	dc05      	bgt.n	8000e78 <fsm_automatic+0x2e0>
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <fsm_automatic+0x398>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fad8 	bl	8000428 <displayled_3and4>
			if( count1 >= 10 ) displayled_3and4(count1/10, count1%10);
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <fsm_automatic+0x398>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b09      	cmp	r3, #9
 8000e7e:	dd16      	ble.n	8000eae <fsm_automatic+0x316>
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <fsm_automatic+0x398>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <fsm_automatic+0x3a4>)
 8000e86:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8a:	1092      	asrs	r2, r2, #2
 8000e8c:	17db      	asrs	r3, r3, #31
 8000e8e:	1ad0      	subs	r0, r2, r3
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <fsm_automatic+0x398>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <fsm_automatic+0x3a4>)
 8000e96:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9a:	1099      	asrs	r1, r3, #2
 8000e9c:	17d3      	asrs	r3, r2, #31
 8000e9e:	1ac9      	subs	r1, r1, r3
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	1ad1      	subs	r1, r2, r3
 8000eaa:	f7ff fabd 	bl	8000428 <displayled_3and4>
			count1--;
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <fsm_automatic+0x398>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <fsm_automatic+0x398>)
 8000eb6:	6013      	str	r3, [r2, #0]
		}
		if ( timer4_flag == 1) {
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <fsm_automatic+0x3a8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d136      	bne.n	8000f2e <fsm_automatic+0x396>
			setTimer4(100);
 8000ec0:	2064      	movs	r0, #100	; 0x64
 8000ec2:	f000 fb2b 	bl	800151c <setTimer4>
			if( count1 < 10 ){
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <fsm_automatic+0x398>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b09      	cmp	r3, #9
 8000ecc:	dc07      	bgt.n	8000ede <fsm_automatic+0x346>
				display7SEG2(count2);
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <fsm_automatic+0x39c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc96 	bl	8000804 <display7SEG2>
				display7SEG1(0);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fb05 	bl	80004e8 <display7SEG1>
			}
			if ( count1 >= 10 ){
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <fsm_automatic+0x398>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b09      	cmp	r3, #9
 8000ee4:	dd1a      	ble.n	8000f1c <fsm_automatic+0x384>
				display7SEG2(count2 % 10);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <fsm_automatic+0x39c>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <fsm_automatic+0x3a4>)
 8000eec:	fb83 1302 	smull	r1, r3, r3, r2
 8000ef0:	1099      	asrs	r1, r3, #2
 8000ef2:	17d3      	asrs	r3, r2, #31
 8000ef4:	1ac9      	subs	r1, r1, r3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	1ad1      	subs	r1, r2, r3
 8000f00:	4608      	mov	r0, r1
 8000f02:	f7ff fc7f 	bl	8000804 <display7SEG2>
				display7SEG1(count2 / 10);
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <fsm_automatic+0x39c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <fsm_automatic+0x3a4>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1092      	asrs	r2, r2, #2
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fae6 	bl	80004e8 <display7SEG1>
			}
			count2--;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <fsm_automatic+0x39c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <fsm_automatic+0x39c>)
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e002      	b.n	8000f2e <fsm_automatic+0x396>
	    if (count1 == 0 ) return;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <fsm_automatic+0x396>
	    if (count2 == 0 ) return;
 8000f2c:	bf00      	nop
		}

}
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000ac 	.word	0x200000ac
 8000f34:	200000a8 	.word	0x200000a8
 8000f38:	20000048 	.word	0x20000048
 8000f3c:	66666667 	.word	0x66666667
 8000f40:	2000004c 	.word	0x2000004c

08000f44 <turn_off>:
 *      Author: tranm
 */

#include "fsm_manual.h"

void turn_off(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	480e      	ldr	r0, [pc, #56]	; (8000f88 <turn_off+0x44>)
 8000f4e:	f000 ff2c 	bl	8001daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2110      	movs	r1, #16
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <turn_off+0x44>)
 8000f58:	f000 ff27 	bl	8001daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2108      	movs	r1, #8
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <turn_off+0x44>)
 8000f62:	f000 ff22 	bl	8001daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2140      	movs	r1, #64	; 0x40
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <turn_off+0x44>)
 8000f6c:	f000 ff1d 	bl	8001daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2104      	movs	r1, #4
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <turn_off+0x44>)
 8000f76:	f000 ff18 	bl	8001daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <turn_off+0x44>)
 8000f80:	f000 ff13 	bl	8001daa <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40010800 	.word	0x40010800

08000f8c <fsm_manual>:

void fsm_manual(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	switch(status){
 8000f90:	4bae      	ldr	r3, [pc, #696]	; (800124c <fsm_manual+0x2c0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	2b16      	cmp	r3, #22
 8000f98:	f200 814e 	bhi.w	8001238 <fsm_manual+0x2ac>
 8000f9c:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <fsm_manual+0x18>)
 8000f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa2:	bf00      	nop
 8000fa4:	08001001 	.word	0x08001001
 8000fa8:	08001239 	.word	0x08001239
 8000fac:	08001239 	.word	0x08001239
 8000fb0:	08001239 	.word	0x08001239
 8000fb4:	08001239 	.word	0x08001239
 8000fb8:	08001239 	.word	0x08001239
 8000fbc:	08001239 	.word	0x08001239
 8000fc0:	08001239 	.word	0x08001239
 8000fc4:	08001239 	.word	0x08001239
 8000fc8:	08001239 	.word	0x08001239
 8000fcc:	08001239 	.word	0x08001239
 8000fd0:	08001239 	.word	0x08001239
 8000fd4:	08001239 	.word	0x08001239
 8000fd8:	08001239 	.word	0x08001239
 8000fdc:	08001239 	.word	0x08001239
 8000fe0:	08001239 	.word	0x08001239
 8000fe4:	08001239 	.word	0x08001239
 8000fe8:	08001239 	.word	0x08001239
 8000fec:	08001239 	.word	0x08001239
 8000ff0:	08001023 	.word	0x08001023
 8000ff4:	08001045 	.word	0x08001045
 8000ff8:	080010eb 	.word	0x080010eb
 8000ffc:	0800118f 	.word	0x0800118f
		case INIT:
			if (isButton1Pressed() == 1){
 8001000:	f7ff f8a4 	bl	800014c <isButton1Pressed>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d104      	bne.n	8001014 <fsm_manual+0x88>
				status = MODE1;
 800100a:	4b90      	ldr	r3, [pc, #576]	; (800124c <fsm_manual+0x2c0>)
 800100c:	2214      	movs	r2, #20
 800100e:	601a      	str	r2, [r3, #0]
				turn_off();
 8001010:	f7ff ff98 	bl	8000f44 <turn_off>
			}
			status1 = INIT;
 8001014:	4b8e      	ldr	r3, [pc, #568]	; (8001250 <fsm_manual+0x2c4>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 800101a:	4b8e      	ldr	r3, [pc, #568]	; (8001254 <fsm_manual+0x2c8>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
			break;
 8001020:	e111      	b.n	8001246 <fsm_manual+0x2ba>
		case MODE1:
			fsm_automatic();
 8001022:	f7ff fdb9 	bl	8000b98 <fsm_automatic>
			 if (isButton1Pressed() == 1){
 8001026:	f7ff f891 	bl	800014c <isButton1Pressed>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	f040 8105 	bne.w	800123c <fsm_manual+0x2b0>
				 status = MODE2;
 8001032:	4b86      	ldr	r3, [pc, #536]	; (800124c <fsm_manual+0x2c0>)
 8001034:	2215      	movs	r2, #21
 8001036:	601a      	str	r2, [r3, #0]
				 turn_off();
 8001038:	f7ff ff84 	bl	8000f44 <turn_off>
				 time_red = 0;
 800103c:	4b86      	ldr	r3, [pc, #536]	; (8001258 <fsm_manual+0x2cc>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
			 }
			break;
 8001042:	e0fb      	b.n	800123c <fsm_manual+0x2b0>
		case MODE2:
		    if ( timer5_flag == 1) {
 8001044:	4b85      	ldr	r3, [pc, #532]	; (800125c <fsm_manual+0x2d0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10a      	bne.n	8001062 <fsm_manual+0xd6>
				setTimer5(50);
 800104c:	2032      	movs	r0, #50	; 0x32
 800104e:	f000 fa79 	bl	8001544 <setTimer5>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8001052:	2102      	movs	r1, #2
 8001054:	4882      	ldr	r0, [pc, #520]	; (8001260 <fsm_manual+0x2d4>)
 8001056:	f000 fec0 	bl	8001dda <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 800105a:	2110      	movs	r1, #16
 800105c:	4880      	ldr	r0, [pc, #512]	; (8001260 <fsm_manual+0x2d4>)
 800105e:	f000 febc 	bl	8001dda <HAL_GPIO_TogglePin>
			}
			 if(isButton2Pressed() == 1) time_red++;
 8001062:	f7ff f885 	bl	8000170 <isButton2Pressed>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d104      	bne.n	8001076 <fsm_manual+0xea>
 800106c:	4b7a      	ldr	r3, [pc, #488]	; (8001258 <fsm_manual+0x2cc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a79      	ldr	r2, [pc, #484]	; (8001258 <fsm_manual+0x2cc>)
 8001074:	6013      	str	r3, [r2, #0]
			 display7SEG2(2);
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff fbc4 	bl	8000804 <display7SEG2>
			 display7SEG1(0);
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fa33 	bl	80004e8 <display7SEG1>
			 if( time_red < 10 ) displayled_3and4(0, time_red);
 8001082:	4b75      	ldr	r3, [pc, #468]	; (8001258 <fsm_manual+0x2cc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b09      	cmp	r3, #9
 8001088:	dc05      	bgt.n	8001096 <fsm_manual+0x10a>
 800108a:	4b73      	ldr	r3, [pc, #460]	; (8001258 <fsm_manual+0x2cc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff f9c9 	bl	8000428 <displayled_3and4>
			 if( time_red >= 10 ) displayled_3and4(time_red/10, time_red%10);
 8001096:	4b70      	ldr	r3, [pc, #448]	; (8001258 <fsm_manual+0x2cc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b09      	cmp	r3, #9
 800109c:	dd16      	ble.n	80010cc <fsm_manual+0x140>
 800109e:	4b6e      	ldr	r3, [pc, #440]	; (8001258 <fsm_manual+0x2cc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a70      	ldr	r2, [pc, #448]	; (8001264 <fsm_manual+0x2d8>)
 80010a4:	fb82 1203 	smull	r1, r2, r2, r3
 80010a8:	1092      	asrs	r2, r2, #2
 80010aa:	17db      	asrs	r3, r3, #31
 80010ac:	1ad0      	subs	r0, r2, r3
 80010ae:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <fsm_manual+0x2cc>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b6c      	ldr	r3, [pc, #432]	; (8001264 <fsm_manual+0x2d8>)
 80010b4:	fb83 1302 	smull	r1, r3, r3, r2
 80010b8:	1099      	asrs	r1, r3, #2
 80010ba:	17d3      	asrs	r3, r2, #31
 80010bc:	1ac9      	subs	r1, r1, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	1ad1      	subs	r1, r2, r3
 80010c8:	f7ff f9ae 	bl	8000428 <displayled_3and4>
			 if (isButton1Pressed() == 1){
 80010cc:	f7ff f83e 	bl	800014c <isButton1Pressed>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	f040 80b4 	bne.w	8001240 <fsm_manual+0x2b4>
				 status = MODE3;
 80010d8:	4b5c      	ldr	r3, [pc, #368]	; (800124c <fsm_manual+0x2c0>)
 80010da:	2216      	movs	r2, #22
 80010dc:	601a      	str	r2, [r3, #0]
				 turn_off();
 80010de:	f7ff ff31 	bl	8000f44 <turn_off>
				 time_yellow = 0;
 80010e2:	4b61      	ldr	r3, [pc, #388]	; (8001268 <fsm_manual+0x2dc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
			 }
			break;
 80010e8:	e0aa      	b.n	8001240 <fsm_manual+0x2b4>
		case MODE3:
		    if ( timer5_flag == 1) {
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <fsm_manual+0x2d0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d10a      	bne.n	8001108 <fsm_manual+0x17c>
				setTimer5(50);
 80010f2:	2032      	movs	r0, #50	; 0x32
 80010f4:	f000 fa26 	bl	8001544 <setTimer5>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 80010f8:	2104      	movs	r1, #4
 80010fa:	4859      	ldr	r0, [pc, #356]	; (8001260 <fsm_manual+0x2d4>)
 80010fc:	f000 fe6d 	bl	8001dda <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8001100:	2120      	movs	r1, #32
 8001102:	4857      	ldr	r0, [pc, #348]	; (8001260 <fsm_manual+0x2d4>)
 8001104:	f000 fe69 	bl	8001dda <HAL_GPIO_TogglePin>
			}
			 if(isButton2Pressed() == 1) time_yellow++;
 8001108:	f7ff f832 	bl	8000170 <isButton2Pressed>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d104      	bne.n	800111c <fsm_manual+0x190>
 8001112:	4b55      	ldr	r3, [pc, #340]	; (8001268 <fsm_manual+0x2dc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a53      	ldr	r2, [pc, #332]	; (8001268 <fsm_manual+0x2dc>)
 800111a:	6013      	str	r3, [r2, #0]
			 display7SEG2(3);
 800111c:	2003      	movs	r0, #3
 800111e:	f7ff fb71 	bl	8000804 <display7SEG2>
			 display7SEG1(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff f9e0 	bl	80004e8 <display7SEG1>
			 if( time_yellow < 10 ) displayled_3and4(0, time_yellow);
 8001128:	4b4f      	ldr	r3, [pc, #316]	; (8001268 <fsm_manual+0x2dc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	dc05      	bgt.n	800113c <fsm_manual+0x1b0>
 8001130:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <fsm_manual+0x2dc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff f976 	bl	8000428 <displayled_3and4>
			 if( time_yellow >= 10 ) displayled_3and4(time_yellow/10, time_yellow%10);
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <fsm_manual+0x2dc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b09      	cmp	r3, #9
 8001142:	dd16      	ble.n	8001172 <fsm_manual+0x1e6>
 8001144:	4b48      	ldr	r3, [pc, #288]	; (8001268 <fsm_manual+0x2dc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a46      	ldr	r2, [pc, #280]	; (8001264 <fsm_manual+0x2d8>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1092      	asrs	r2, r2, #2
 8001150:	17db      	asrs	r3, r3, #31
 8001152:	1ad0      	subs	r0, r2, r3
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <fsm_manual+0x2dc>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <fsm_manual+0x2d8>)
 800115a:	fb83 1302 	smull	r1, r3, r3, r2
 800115e:	1099      	asrs	r1, r3, #2
 8001160:	17d3      	asrs	r3, r2, #31
 8001162:	1ac9      	subs	r1, r1, r3
 8001164:	460b      	mov	r3, r1
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	1ad1      	subs	r1, r2, r3
 800116e:	f7ff f95b 	bl	8000428 <displayled_3and4>
			 if (isButton1Pressed() == 1){
 8001172:	f7fe ffeb 	bl	800014c <isButton1Pressed>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d163      	bne.n	8001244 <fsm_manual+0x2b8>
				 status = MODE4;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <fsm_manual+0x2c0>)
 800117e:	2217      	movs	r2, #23
 8001180:	601a      	str	r2, [r3, #0]
				 turn_off();
 8001182:	f7ff fedf 	bl	8000f44 <turn_off>
				 time_green = 0;
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <fsm_manual+0x2e0>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
			 }
			break;
 800118c:	e05a      	b.n	8001244 <fsm_manual+0x2b8>
		case MODE4:
		    if ( timer5_flag == 1) {
 800118e:	4b33      	ldr	r3, [pc, #204]	; (800125c <fsm_manual+0x2d0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10a      	bne.n	80011ac <fsm_manual+0x220>
				setTimer5(50);
 8001196:	2032      	movs	r0, #50	; 0x32
 8001198:	f000 f9d4 	bl	8001544 <setTimer5>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800119c:	2108      	movs	r1, #8
 800119e:	4830      	ldr	r0, [pc, #192]	; (8001260 <fsm_manual+0x2d4>)
 80011a0:	f000 fe1b 	bl	8001dda <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <fsm_manual+0x2d4>)
 80011a8:	f000 fe17 	bl	8001dda <HAL_GPIO_TogglePin>
			}
			 if(isButton2Pressed() == 1) time_green++;
 80011ac:	f7fe ffe0 	bl	8000170 <isButton2Pressed>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d104      	bne.n	80011c0 <fsm_manual+0x234>
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <fsm_manual+0x2e0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <fsm_manual+0x2e0>)
 80011be:	6013      	str	r3, [r2, #0]
			 display7SEG2(4);
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff fb1f 	bl	8000804 <display7SEG2>
			 display7SEG1(0);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff f98e 	bl	80004e8 <display7SEG1>
			 if( time_green < 10 ) displayled_3and4(0, time_green);
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <fsm_manual+0x2e0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	dc05      	bgt.n	80011e0 <fsm_manual+0x254>
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <fsm_manual+0x2e0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff f924 	bl	8000428 <displayled_3and4>
			 if( time_green >= 10 ) displayled_3and4(time_green/10, time_green%10);
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <fsm_manual+0x2e0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b09      	cmp	r3, #9
 80011e6:	dd16      	ble.n	8001216 <fsm_manual+0x28a>
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <fsm_manual+0x2e0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <fsm_manual+0x2d8>)
 80011ee:	fb82 1203 	smull	r1, r2, r2, r3
 80011f2:	1092      	asrs	r2, r2, #2
 80011f4:	17db      	asrs	r3, r3, #31
 80011f6:	1ad0      	subs	r0, r2, r3
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <fsm_manual+0x2e0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <fsm_manual+0x2d8>)
 80011fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001202:	1099      	asrs	r1, r3, #2
 8001204:	17d3      	asrs	r3, r2, #31
 8001206:	1ac9      	subs	r1, r1, r3
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	1ad1      	subs	r1, r2, r3
 8001212:	f7ff f909 	bl	8000428 <displayled_3and4>
			 if (isButton1Pressed() == 1){
 8001216:	f7fe ff99 	bl	800014c <isButton1Pressed>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d104      	bne.n	800122a <fsm_manual+0x29e>
				 status = MODE1;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <fsm_manual+0x2c0>)
 8001222:	2214      	movs	r2, #20
 8001224:	601a      	str	r2, [r3, #0]
				 turn_off();
 8001226:	f7ff fe8d 	bl	8000f44 <turn_off>
			 }
			 status1 = INIT;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <fsm_manual+0x2c4>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
			 status2 = INIT;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <fsm_manual+0x2c8>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
			break;
 8001236:	e006      	b.n	8001246 <fsm_manual+0x2ba>
		default:
			break;
 8001238:	bf00      	nop
 800123a:	e004      	b.n	8001246 <fsm_manual+0x2ba>
			break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <fsm_manual+0x2ba>
			break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <fsm_manual+0x2ba>
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000090 	.word	0x20000090
 8001250:	20000088 	.word	0x20000088
 8001254:	2000008c 	.word	0x2000008c
 8001258:	20000034 	.word	0x20000034
 800125c:	20000050 	.word	0x20000050
 8001260:	40010800 	.word	0x40010800
 8001264:	66666667 	.word	0x66666667
 8001268:	20000038 	.word	0x20000038
 800126c:	2000003c 	.word	0x2000003c

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fa98 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f812 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 f898 	bl	80013b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001280:	f000 f84a 	bl	8001318 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <main+0x28>)
 8001286:	f001 f9f9 	bl	800267c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
status = INIT;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <main+0x2c>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

//countdown(5);

  while (1)
  {
	  fsm_manual();
 8001290:	f7ff fe7c 	bl	8000f8c <fsm_manual>
 8001294:	e7fc      	b.n	8001290 <main+0x20>
 8001296:	bf00      	nop
 8001298:	200000b0 	.word	0x200000b0
 800129c:	20000090 	.word	0x20000090

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b090      	sub	sp, #64	; 0x40
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	2228      	movs	r2, #40	; 0x28
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fd9c 	bl	8002dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ca:	2310      	movs	r3, #16
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0318 	add.w	r3, r7, #24
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fd98 	bl	8001e0c <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012e2:	f000 f8d9 	bl	8001498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 f804 	bl	800230c <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800130a:	f000 f8c5 	bl	8001498 <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3740      	adds	r7, #64	; 0x40
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_TIM2_Init+0x94>)
 8001336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_TIM2_Init+0x94>)
 800133e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_TIM2_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_TIM2_Init+0x94>)
 800134c:	2209      	movs	r2, #9
 800134e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_TIM2_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_TIM2_Init+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_TIM2_Init+0x94>)
 800135e:	f001 f93d 	bl	80025dc <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001368:	f000 f896 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <MX_TIM2_Init+0x94>)
 800137a:	f001 fad3 	bl	8002924 <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001384:	f000 f888 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_TIM2_Init+0x94>)
 8001396:	f001 fc9b 	bl	8002cd0 <HAL_TIMEx_MasterConfigSynchronization>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013a0:	f000 f87a 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200000b0 	.word	0x200000b0

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <MX_GPIO_Init+0xbc>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <MX_GPIO_Init+0xbc>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <MX_GPIO_Init+0xbc>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <MX_GPIO_Init+0xbc>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a22      	ldr	r2, [pc, #136]	; (800146c <MX_GPIO_Init+0xbc>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_GPIO_Init+0xbc>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80013f4:	2200      	movs	r2, #0
 80013f6:	f24f 017e 	movw	r1, #61566	; 0xf07e
 80013fa:	481d      	ldr	r0, [pc, #116]	; (8001470 <MX_GPIO_Init+0xc0>)
 80013fc:	f000 fcd5 	bl	8001daa <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SH_CP_Pin|ST_CP_Pin
                          |led7_3_Pin|led7_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 8001400:	2200      	movs	r2, #0
 8001402:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001406:	481b      	ldr	r0, [pc, #108]	; (8001474 <MX_GPIO_Init+0xc4>)
 8001408:	f000 fccf 	bl	8001daa <HAL_GPIO_WritePin>
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SH_CP_Pin ST_CP_Pin
                           led7_3_Pin led7_4_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 800140c:	f24f 037e 	movw	r3, #61566	; 0xf07e
 8001410:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SH_CP_Pin|ST_CP_Pin
                          |led7_3_Pin|led7_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2302      	movs	r3, #2
 800141c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4619      	mov	r1, r3
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <MX_GPIO_Init+0xc0>)
 8001426:	f000 fb2f 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 800142a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800142e:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2302      	movs	r3, #2
 800143a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4619      	mov	r1, r3
 8001442:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_GPIO_Init+0xc4>)
 8001444:	f000 fb20 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001448:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800144c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001452:	2301      	movs	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	4619      	mov	r1, r3
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_GPIO_Init+0xc0>)
 800145e:	f000 fb13 	bl	8001a88 <HAL_GPIO_Init>

}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00

08001478 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001480:	f000 f874 	bl	800156c <timerRun>
	getKey1Input();
 8001484:	f7fe fe86 	bl	8000194 <getKey1Input>
	getKey2Input();
 8001488:	f7fe fede 	bl	8000248 <getKey2Input>
	getKey3Input();
 800148c:	f7fe ff36 	bl	80002fc <getKey3Input>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <setTimer1>:
int timer4_flag = 1;

int timer5_counter = 0;
int timer5_flag = 1;

void setTimer1 (int duration){
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <setTimer1+0x20>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <setTimer1+0x24>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000094 	.word	0x20000094
 80014c8:	20000040 	.word	0x20000040

080014cc <setTimer2>:

void setTimer2 (int duration){
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <setTimer2+0x20>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <setTimer2+0x24>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000098 	.word	0x20000098
 80014f0:	20000044 	.word	0x20000044

080014f4 <setTimer3>:

void setTimer3 (int duration){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80014fc:	4a05      	ldr	r2, [pc, #20]	; (8001514 <setTimer3+0x20>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <setTimer3+0x24>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000009c 	.word	0x2000009c
 8001518:	20000048 	.word	0x20000048

0800151c <setTimer4>:

void setTimer4 (int duration){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <setTimer4+0x20>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <setTimer4+0x24>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	200000a0 	.word	0x200000a0
 8001540:	2000004c 	.word	0x2000004c

08001544 <setTimer5>:

void setTimer5 (int duration){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <setTimer5+0x20>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <setTimer5+0x24>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200000a4 	.word	0x200000a4
 8001568:	20000050 	.word	0x20000050

0800156c <timerRun>:

 void timerRun(){
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	 if (timer1_counter > 0){
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <timerRun+0xac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	dd0b      	ble.n	8001590 <timerRun+0x24>
		 timer1_counter--;
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <timerRun+0xac>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	4a26      	ldr	r2, [pc, #152]	; (8001618 <timerRun+0xac>)
 8001580:	6013      	str	r3, [r2, #0]
		 if(timer1_counter <= 0){
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <timerRun+0xac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	dc02      	bgt.n	8001590 <timerRun+0x24>
			 timer1_flag = 1;
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <timerRun+0xb0>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
		 }
	 }
	 if (timer2_counter > 0){
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <timerRun+0xb4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dd0b      	ble.n	80015b0 <timerRun+0x44>
		 timer2_counter--;
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <timerRun+0xb4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a20      	ldr	r2, [pc, #128]	; (8001620 <timerRun+0xb4>)
 80015a0:	6013      	str	r3, [r2, #0]
		 if(timer2_counter <= 0){
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <timerRun+0xb4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dc02      	bgt.n	80015b0 <timerRun+0x44>
			 timer2_flag = 1;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <timerRun+0xb8>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
		 }
	 }
	 if (timer3_counter > 0){
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <timerRun+0xbc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	dd0b      	ble.n	80015d0 <timerRun+0x64>
		 timer3_counter--;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <timerRun+0xbc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <timerRun+0xbc>)
 80015c0:	6013      	str	r3, [r2, #0]
		 if(timer3_counter <= 0){
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <timerRun+0xbc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	dc02      	bgt.n	80015d0 <timerRun+0x64>
			 timer3_flag = 1;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <timerRun+0xc0>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
		 }
	 }
	 if (timer4_counter > 0){
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <timerRun+0xc4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dd0b      	ble.n	80015f0 <timerRun+0x84>
		 timer4_counter--;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <timerRun+0xc4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3b01      	subs	r3, #1
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <timerRun+0xc4>)
 80015e0:	6013      	str	r3, [r2, #0]
		 if(timer4_counter <= 0){
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <timerRun+0xc4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dc02      	bgt.n	80015f0 <timerRun+0x84>
			 timer4_flag = 1;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <timerRun+0xc8>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
		 }
	 }
	 if (timer5_counter > 0){
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <timerRun+0xcc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dd0b      	ble.n	8001610 <timerRun+0xa4>
		 timer5_counter--;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <timerRun+0xcc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <timerRun+0xcc>)
 8001600:	6013      	str	r3, [r2, #0]
		 if(timer5_counter <= 0){
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <timerRun+0xcc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	dc02      	bgt.n	8001610 <timerRun+0xa4>
			 timer5_flag = 1;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <timerRun+0xd0>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
		 }
	 }
 }
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000094 	.word	0x20000094
 800161c:	20000040 	.word	0x20000040
 8001620:	20000098 	.word	0x20000098
 8001624:	20000044 	.word	0x20000044
 8001628:	2000009c 	.word	0x2000009c
 800162c:	20000048 	.word	0x20000048
 8001630:	200000a0 	.word	0x200000a0
 8001634:	2000004c 	.word	0x2000004c
 8001638:	200000a4 	.word	0x200000a4
 800163c:	20000050 	.word	0x20000050

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_MspInit+0x5c>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a14      	ldr	r2, [pc, #80]	; (800169c <HAL_MspInit+0x5c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_MspInit+0x5c>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_MspInit+0x5c>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_MspInit+0x5c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_MspInit+0x5c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_MspInit+0x60>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_MspInit+0x60>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000

080016a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b4:	d113      	bne.n	80016de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_TIM_Base_MspInit+0x44>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_TIM_Base_MspInit+0x44>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_TIM_Base_MspInit+0x44>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	201c      	movs	r0, #28
 80016d4:	f000 f9a1 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d8:	201c      	movs	r0, #28
 80016da:	f000 f9ba 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f000 f87f 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <TIM2_IRQHandler+0x10>)
 8001742:	f000 ffe7 	bl	8002714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000b0 	.word	0x200000b0

08001750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	; (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001782:	f7ff ffe5 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f001 fb0d 	bl	8002da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178a:	f7ff fd71 	bl	8001270 <main>
  bx lr
 800178e:	4770      	bx	lr
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001798:	08002e3c 	.word	0x08002e3c
  ldr r2, =_sbss
 800179c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017a0:	200000fc 	.word	0x200000fc

080017a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_Init+0x28>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_Init+0x28>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f923 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	200f      	movs	r0, #15
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff ff3c 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f93b 	bl	8001a6e <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 f903 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000054 	.word	0x20000054
 800182c:	2000005c 	.word	0x2000005c
 8001830:	20000058 	.word	0x20000058

08001834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x1c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_IncTick+0x20>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	2000005c 	.word	0x2000005c
 8001854:	200000f8 	.word	0x200000f8

08001858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	200000f8 	.word	0x200000f8

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <__NVIC_EnableIRQ+0x34>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff90 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff2d 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff42 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff90 	bl	800195c <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5f 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff35 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	e148      	b.n	8001d2e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 8137 	bne.w	8001d28 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4aa3      	ldr	r2, [pc, #652]	; (8001d4c <HAL_GPIO_Init+0x2c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d05e      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ac4:	4aa1      	ldr	r2, [pc, #644]	; (8001d4c <HAL_GPIO_Init+0x2c4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d875      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001aca:	4aa1      	ldr	r2, [pc, #644]	; (8001d50 <HAL_GPIO_Init+0x2c8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d058      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a9f      	ldr	r2, [pc, #636]	; (8001d50 <HAL_GPIO_Init+0x2c8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d86f      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001ad6:	4a9f      	ldr	r2, [pc, #636]	; (8001d54 <HAL_GPIO_Init+0x2cc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d052      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001adc:	4a9d      	ldr	r2, [pc, #628]	; (8001d54 <HAL_GPIO_Init+0x2cc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d869      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001ae2:	4a9d      	ldr	r2, [pc, #628]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d04c      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a9b      	ldr	r2, [pc, #620]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d863      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001aee:	4a9b      	ldr	r2, [pc, #620]	; (8001d5c <HAL_GPIO_Init+0x2d4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d046      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001af4:	4a99      	ldr	r2, [pc, #612]	; (8001d5c <HAL_GPIO_Init+0x2d4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d85d      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d82a      	bhi.n	8001b54 <HAL_GPIO_Init+0xcc>
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	d859      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001b02:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <HAL_GPIO_Init+0x80>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b83 	.word	0x08001b83
 8001b0c:	08001b5d 	.word	0x08001b5d
 8001b10:	08001b6f 	.word	0x08001b6f
 8001b14:	08001bb1 	.word	0x08001bb1
 8001b18:	08001bb7 	.word	0x08001bb7
 8001b1c:	08001bb7 	.word	0x08001bb7
 8001b20:	08001bb7 	.word	0x08001bb7
 8001b24:	08001bb7 	.word	0x08001bb7
 8001b28:	08001bb7 	.word	0x08001bb7
 8001b2c:	08001bb7 	.word	0x08001bb7
 8001b30:	08001bb7 	.word	0x08001bb7
 8001b34:	08001bb7 	.word	0x08001bb7
 8001b38:	08001bb7 	.word	0x08001bb7
 8001b3c:	08001bb7 	.word	0x08001bb7
 8001b40:	08001bb7 	.word	0x08001bb7
 8001b44:	08001bb7 	.word	0x08001bb7
 8001b48:	08001bb7 	.word	0x08001bb7
 8001b4c:	08001b65 	.word	0x08001b65
 8001b50:	08001b79 	.word	0x08001b79
 8001b54:	4a82      	ldr	r2, [pc, #520]	; (8001d60 <HAL_GPIO_Init+0x2d8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b5a:	e02c      	b.n	8001bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e029      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e024      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	3308      	adds	r3, #8
 8001b74:	623b      	str	r3, [r7, #32]
          break;
 8001b76:	e01f      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e01a      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e013      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	611a      	str	r2, [r3, #16]
          break;
 8001ba2:	e009      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	615a      	str	r2, [r3, #20]
          break;
 8001bae:	e003      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
          break;
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          break;
 8001bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d801      	bhi.n	8001bc2 <HAL_GPIO_Init+0x13a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	e001      	b.n	8001bc6 <HAL_GPIO_Init+0x13e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d802      	bhi.n	8001bd4 <HAL_GPIO_Init+0x14c>
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_Init+0x152>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	3b08      	subs	r3, #8
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	210f      	movs	r1, #15
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	6a39      	ldr	r1, [r7, #32]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8090 	beq.w	8001d28 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c08:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <HAL_GPIO_Init+0x2dc>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a55      	ldr	r2, [pc, #340]	; (8001d64 <HAL_GPIO_Init+0x2dc>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_GPIO_Init+0x2dc>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c20:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a49      	ldr	r2, [pc, #292]	; (8001d6c <HAL_GPIO_Init+0x2e4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_Init+0x1e0>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a48      	ldr	r2, [pc, #288]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0x1dc>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a47      	ldr	r2, [pc, #284]	; (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_Init+0x1d8>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1e2>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1e2>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1e2>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7a:	493b      	ldr	r1, [pc, #236]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4933      	ldr	r1, [pc, #204]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	492d      	ldr	r1, [pc, #180]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4929      	ldr	r1, [pc, #164]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4923      	ldr	r1, [pc, #140]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf2:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	491f      	ldr	r1, [pc, #124]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	4919      	ldr	r1, [pc, #100]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4915      	ldr	r1, [pc, #84]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f aeaf 	bne.w	8001a9c <HAL_GPIO_Init+0x14>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	372c      	adds	r7, #44	; 0x2c
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	10320000 	.word	0x10320000
 8001d50:	10310000 	.word	0x10310000
 8001d54:	10220000 	.word	0x10220000
 8001d58:	10210000 	.word	0x10210000
 8001d5c:	10120000 	.word	0x10120000
 8001d60:	10110000 	.word	0x10110000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40011000 	.word	0x40011000
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dba:	787b      	ldrb	r3, [r7, #1]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc0:	887a      	ldrh	r2, [r7, #2]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dc6:	e003      	b.n	8001dd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	041a      	lsls	r2, r3, #16
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	611a      	str	r2, [r3, #16]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dec:	887a      	ldrh	r2, [r7, #2]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4013      	ands	r3, r2
 8001df2:	041a      	lsls	r2, r3, #16
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	400b      	ands	r3, r1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e26c      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8087 	beq.w	8001f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d00c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e38:	4b8f      	ldr	r3, [pc, #572]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d112      	bne.n	8001e6a <HAL_RCC_OscConfig+0x5e>
 8001e44:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d10b      	bne.n	8001e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e52:	4b89      	ldr	r3, [pc, #548]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d06c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x12c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d168      	bne.n	8001f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e246      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x76>
 8001e74:	4b80      	ldr	r3, [pc, #512]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a7f      	ldr	r2, [pc, #508]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e02e      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7a      	ldr	r2, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b78      	ldr	r3, [pc, #480]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a77      	ldr	r2, [pc, #476]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e01d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xbc>
 8001eae:	4b72      	ldr	r3, [pc, #456]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a71      	ldr	r2, [pc, #452]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd4>
 8001ec8:	4b6b      	ldr	r3, [pc, #428]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b68      	ldr	r3, [pc, #416]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a67      	ldr	r2, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fcb6 	bl	8001858 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fcb2 	bl	8001858 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1fa      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe4>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fca2 	bl	8001858 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fc9e 	bl	8001858 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1e6      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x10c>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d063      	beq.n	800200e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f46:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f52:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d11c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x18c>
 8001f5e:	4b46      	ldr	r3, [pc, #280]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x176>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e1ba      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4939      	ldr	r1, [pc, #228]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	e03a      	b.n	800200e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fc57 	bl	8001858 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff fc53 	bl	8001858 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e19b      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4927      	ldr	r1, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fc36 	bl	8001858 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff0:	f7ff fc32 	bl	8001858 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e17a      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d03a      	beq.n	8002090 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d019      	beq.n	8002056 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_RCC_OscConfig+0x274>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002028:	f7ff fc16 	bl	8001858 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002030:	f7ff fc12 	bl	8001858 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e15a      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_RCC_OscConfig+0x26c>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800204e:	2001      	movs	r0, #1
 8002050:	f000 faa6 	bl	80025a0 <RCC_Delay>
 8002054:	e01c      	b.n	8002090 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_OscConfig+0x274>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205c:	f7ff fbfc 	bl	8001858 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002062:	e00f      	b.n	8002084 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff fbf8 	bl	8001858 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d908      	bls.n	8002084 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e140      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	42420000 	.word	0x42420000
 8002080:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	4b9e      	ldr	r3, [pc, #632]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e9      	bne.n	8002064 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a6 	beq.w	80021ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a2:	4b97      	ldr	r3, [pc, #604]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	4b94      	ldr	r3, [pc, #592]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a93      	ldr	r2, [pc, #588]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b91      	ldr	r3, [pc, #580]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c6:	2301      	movs	r3, #1
 80020c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ca:	4b8e      	ldr	r3, [pc, #568]	; (8002304 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d118      	bne.n	8002108 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d6:	4b8b      	ldr	r3, [pc, #556]	; (8002304 <HAL_RCC_OscConfig+0x4f8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a8a      	ldr	r2, [pc, #552]	; (8002304 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e2:	f7ff fbb9 	bl	8001858 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ea:	f7ff fbb5 	bl	8001858 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b64      	cmp	r3, #100	; 0x64
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0fd      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	4b81      	ldr	r3, [pc, #516]	; (8002304 <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x312>
 8002110:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a7a      	ldr	r2, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	e02d      	b.n	800217a <HAL_RCC_OscConfig+0x36e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x334>
 8002126:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a75      	ldr	r2, [pc, #468]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	4b73      	ldr	r3, [pc, #460]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a72      	ldr	r2, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	e01c      	b.n	800217a <HAL_RCC_OscConfig+0x36e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d10c      	bne.n	8002162 <HAL_RCC_OscConfig+0x356>
 8002148:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a6c      	ldr	r2, [pc, #432]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a69      	ldr	r2, [pc, #420]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e00b      	b.n	800217a <HAL_RCC_OscConfig+0x36e>
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a66      	ldr	r2, [pc, #408]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	4b64      	ldr	r3, [pc, #400]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a63      	ldr	r2, [pc, #396]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d015      	beq.n	80021ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7ff fb69 	bl	8001858 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff fb65 	bl	8001858 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0ab      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a0:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ee      	beq.n	800218a <HAL_RCC_OscConfig+0x37e>
 80021ac:	e014      	b.n	80021d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fb53 	bl	8001858 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff fb4f 	bl	8001858 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e095      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021cc:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1ee      	bne.n	80021b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b48      	ldr	r3, [pc, #288]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a47      	ldr	r2, [pc, #284]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8081 	beq.w	80022f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d061      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d146      	bne.n	8002296 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_RCC_OscConfig+0x4fc>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff fb23 	bl	8001858 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff fb1f 	bl	8001858 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e067      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d108      	bne.n	8002250 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	492d      	ldr	r1, [pc, #180]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a19      	ldr	r1, [r3, #32]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	430b      	orrs	r3, r1
 8002262:	4927      	ldr	r1, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_OscConfig+0x4fc>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff faf3 	bl	8001858 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7ff faef 	bl	8001858 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e037      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x46a>
 8002294:	e02f      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_RCC_OscConfig+0x4fc>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff fadc 	bl	8001858 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff fad8 	bl	8001858 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e020      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x498>
 80022c2:	e018      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e013      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
 8002308:	42420060 	.word	0x42420060

0800230c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0d0      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d910      	bls.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0207 	bic.w	r2, r3, #7
 8002336:	4965      	ldr	r1, [pc, #404]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800238a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d040      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e073      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4936      	ldr	r1, [pc, #216]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7ff fa2c 	bl	8001858 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff fa28 	bl	8001858 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e053      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d210      	bcs.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4922      	ldr	r1, [pc, #136]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490a      	ldr	r1, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1cc>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f98a 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08002e24 	.word	0x08002e24
 80024d8:	20000054 	.word	0x20000054
 80024dc:	20000058 	.word	0x20000058

080024e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b490      	push	{r4, r7}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024e8:	1d3c      	adds	r4, r7, #4
 80024ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024f0:	f240 2301 	movw	r3, #513	; 0x201
 80024f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_GetSysClockFreq+0xb4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x40>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x46>
 800251e:	e02d      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002522:	623b      	str	r3, [r7, #32]
      break;
 8002524:	e02d      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	0c9b      	lsrs	r3, r3, #18
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002532:	4413      	add	r3, r2
 8002534:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002538:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	0c5b      	lsrs	r3, r3, #17
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002552:	4413      	add	r3, r2
 8002554:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002558:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255e:	fb02 f203 	mul.w	r2, r2, r3
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	e004      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	623b      	str	r3, [r7, #32]
      break;
 800257a:	e002      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257e:	623b      	str	r3, [r7, #32]
      break;
 8002580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002582:	6a3b      	ldr	r3, [r7, #32]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bc90      	pop	{r4, r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	08002e14 	.word	0x08002e14
 8002594:	40021000 	.word	0x40021000
 8002598:	007a1200 	.word	0x007a1200
 800259c:	003d0900 	.word	0x003d0900

080025a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <RCC_Delay+0x34>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <RCC_Delay+0x38>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a5b      	lsrs	r3, r3, #9
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025bc:	bf00      	nop
  }
  while (Delay --);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	60fa      	str	r2, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f9      	bne.n	80025bc <RCC_Delay+0x1c>
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000054 	.word	0x20000054
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e041      	b.n	8002672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f84e 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fa6a 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d001      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e035      	b.n	8002700 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_TIM_Base_Start_IT+0x90>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x4e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d004      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x4e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_TIM_Base_Start_IT+0x94>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d111      	bne.n	80026ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d010      	beq.n	80026fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ec:	e007      	b.n	80026fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400

08002714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0202 	mvn.w	r2, #2
 8002740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9b1 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9a4 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9b3 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0204 	mvn.w	r2, #4
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f987 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f97a 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f989 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0208 	mvn.w	r2, #8
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2204      	movs	r2, #4
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f95d 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f950 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f95f 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b10      	cmp	r3, #16
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0210 	mvn.w	r2, #16
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2208      	movs	r2, #8
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f933 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f926 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f935 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0201 	mvn.w	r2, #1
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fdf0 	bl	8001478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d107      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa67 	bl	8002d92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d107      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8f9 	bl	8002ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b20      	cmp	r3, #32
 800290a:	d107      	bne.n	800291c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0220 	mvn.w	r2, #32
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa32 	bl	8002d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIM_ConfigClockSource+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e0b3      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x180>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800295a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002962:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002974:	d03e      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0xd0>
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	f200 8087 	bhi.w	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002982:	f000 8085 	beq.w	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d87f      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 800298c:	2b70      	cmp	r3, #112	; 0x70
 800298e:	d01a      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xa2>
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d87b      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 8002994:	2b60      	cmp	r3, #96	; 0x60
 8002996:	d050      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x116>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d877      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 800299c:	2b50      	cmp	r3, #80	; 0x50
 800299e:	d03c      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0xf6>
 80029a0:	2b50      	cmp	r3, #80	; 0x50
 80029a2:	d873      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d058      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x136>
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d86f      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 80029ac:	2b30      	cmp	r3, #48	; 0x30
 80029ae:	d064      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x156>
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d86b      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d060      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x156>
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d867      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05c      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x156>
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d05a      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029c4:	e062      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f000 f95c 	bl	8002c92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	609a      	str	r2, [r3, #8]
      break;
 80029f2:	e04e      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f000 f945 	bl	8002c92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a16:	609a      	str	r2, [r3, #8]
      break;
 8002a18:	e03b      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 f8bc 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2150      	movs	r1, #80	; 0x50
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f913 	bl	8002c5e <TIM_ITRx_SetConfig>
      break;
 8002a38:	e02b      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f000 f8da 	bl	8002c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2160      	movs	r1, #96	; 0x60
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f903 	bl	8002c5e <TIM_ITRx_SetConfig>
      break;
 8002a58:	e01b      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f000 f89c 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2140      	movs	r1, #64	; 0x40
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f8f3 	bl	8002c5e <TIM_ITRx_SetConfig>
      break;
 8002a78:	e00b      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f000 f8ea 	bl	8002c5e <TIM_ITRx_SetConfig>
        break;
 8002a8a:	e002      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <TIM_Base_SetConfig+0xa8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <TIM_Base_SetConfig+0x28>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b12:	d003      	beq.n	8002b1c <TIM_Base_SetConfig+0x28>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <TIM_Base_SetConfig+0xac>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d108      	bne.n	8002b2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <TIM_Base_SetConfig+0xa8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <TIM_Base_SetConfig+0x52>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d003      	beq.n	8002b46 <TIM_Base_SetConfig+0x52>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <TIM_Base_SetConfig+0xac>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d108      	bne.n	8002b58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <TIM_Base_SetConfig+0xa8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d103      	bne.n	8002b8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	615a      	str	r2, [r3, #20]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400

08002ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f023 030a 	bic.w	r3, r3, #10
 8002be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f023 0210 	bic.w	r2, r3, #16
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	031b      	lsls	r3, r3, #12
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f043 0307 	orr.w	r3, r3, #7
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b087      	sub	sp, #28
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	021a      	lsls	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	609a      	str	r2, [r3, #8]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e041      	b.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d004      	beq.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10c      	bne.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40012c00 	.word	0x40012c00
 8002d7c:	40000400 	.word	0x40000400

08002d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <__libc_init_array>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	2600      	movs	r6, #0
 8002da8:	4d0c      	ldr	r5, [pc, #48]	; (8002ddc <__libc_init_array+0x38>)
 8002daa:	4c0d      	ldr	r4, [pc, #52]	; (8002de0 <__libc_init_array+0x3c>)
 8002dac:	1b64      	subs	r4, r4, r5
 8002dae:	10a4      	asrs	r4, r4, #2
 8002db0:	42a6      	cmp	r6, r4
 8002db2:	d109      	bne.n	8002dc8 <__libc_init_array+0x24>
 8002db4:	f000 f822 	bl	8002dfc <_init>
 8002db8:	2600      	movs	r6, #0
 8002dba:	4d0a      	ldr	r5, [pc, #40]	; (8002de4 <__libc_init_array+0x40>)
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	; (8002de8 <__libc_init_array+0x44>)
 8002dbe:	1b64      	subs	r4, r4, r5
 8002dc0:	10a4      	asrs	r4, r4, #2
 8002dc2:	42a6      	cmp	r6, r4
 8002dc4:	d105      	bne.n	8002dd2 <__libc_init_array+0x2e>
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
 8002dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dcc:	4798      	blx	r3
 8002dce:	3601      	adds	r6, #1
 8002dd0:	e7ee      	b.n	8002db0 <__libc_init_array+0xc>
 8002dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd6:	4798      	blx	r3
 8002dd8:	3601      	adds	r6, #1
 8002dda:	e7f2      	b.n	8002dc2 <__libc_init_array+0x1e>
 8002ddc:	08002e34 	.word	0x08002e34
 8002de0:	08002e34 	.word	0x08002e34
 8002de4:	08002e34 	.word	0x08002e34
 8002de8:	08002e38 	.word	0x08002e38

08002dec <memset>:
 8002dec:	4603      	mov	r3, r0
 8002dee:	4402      	add	r2, r0
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d100      	bne.n	8002df6 <memset+0xa>
 8002df4:	4770      	bx	lr
 8002df6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dfa:	e7f9      	b.n	8002df0 <memset+0x4>

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
